/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtest;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class bools_t implements lcm.lcm.LCMEncodable
{
    public boolean one_bool;
    public boolean fixed_array[];
    public byte num_a;
    public byte num_b;
    public boolean one_dim_array[];
    public boolean two_dim_array[][];
 
    public bools_t()
    {
        fixed_array = new boolean[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x91cff66a81b52b83L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtest.bools_t.class))
            return 0L;
 
        classes.add(lcmtest.bools_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte( this.one_bool ? 1 : 0); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeByte( this.fixed_array[a] ? 1 : 0); 
        }
 
        outs.writeByte(this.num_a); 
 
        outs.writeByte(this.num_b); 
 
        for (int a = 0; a < this.num_a; a++) {
            outs.writeByte( this.one_dim_array[a] ? 1 : 0); 
        }
 
        for (int a = 0; a < this.num_a; a++) {
            for (int b = 0; b < this.num_b; b++) {
                outs.writeByte( this.two_dim_array[a][b] ? 1 : 0); 
            }
        }
 
    }
 
    public bools_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public bools_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtest.bools_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtest.bools_t o = new lcmtest.bools_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.one_bool = ins.readByte()!=0;
 
        this.fixed_array = new boolean[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.fixed_array[a] = ins.readByte()!=0;
        }
 
        this.num_a = ins.readByte();
 
        this.num_b = ins.readByte();
 
        this.one_dim_array = new boolean[(int) num_a];
        for (int a = 0; a < this.num_a; a++) {
            this.one_dim_array[a] = ins.readByte()!=0;
        }
 
        this.two_dim_array = new boolean[(int) num_a][(int) num_b];
        for (int a = 0; a < this.num_a; a++) {
            for (int b = 0; b < this.num_b; b++) {
                this.two_dim_array[a][b] = ins.readByte()!=0;
            }
        }
 
    }
 
    public lcmtest.bools_t copy()
    {
        lcmtest.bools_t outobj = new lcmtest.bools_t();
        outobj.one_bool = this.one_bool;
 
        outobj.fixed_array = new boolean[(int) 3];
        System.arraycopy(this.fixed_array, 0, outobj.fixed_array, 0, 3); 
        outobj.num_a = this.num_a;
 
        outobj.num_b = this.num_b;
 
        outobj.one_dim_array = new boolean[(int) num_a];
        if (this.num_a > 0)
            System.arraycopy(this.one_dim_array, 0, outobj.one_dim_array, 0, this.num_a); 
        outobj.two_dim_array = new boolean[(int) num_a][(int) num_b];
        for (int a = 0; a < this.num_a; a++) {
            if (this.num_b > 0)
                System.arraycopy(this.two_dim_array[a], 0, outobj.two_dim_array[a], 0, this.num_b);        }
 
        return outobj;
    }
 
}

