"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class bools_t(object):
    __slots__ = ["one_bool", "fixed_array", "num_a", "num_b", "one_dim_array", "two_dim_array"]

    __typenames__ = ["boolean", "boolean", "int8_t", "int8_t", "boolean", "boolean"]

    __dimensions__ = [None, [3], None, None, ["num_a"], ["num_a", "num_b"]]

    def __init__(self):
        self.one_bool = False
        self.fixed_array = [ False for dim0 in range(3) ]
        self.num_a = 0
        self.num_b = 0
        self.one_dim_array = []
        self.two_dim_array = []

    def encode(self):
        buf = BytesIO()
        buf.write(bools_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.one_bool))
        buf.write(struct.pack('>3b', *self.fixed_array[:3]))
        buf.write(struct.pack(">bb", self.num_a, self.num_b))
        buf.write(struct.pack('>%db' % self.num_a, *self.one_dim_array[:self.num_a]))
        for i0 in range(self.num_a):
            buf.write(struct.pack('>%db' % self.num_b, *self.two_dim_array[i0][:self.num_b]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != bools_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return bools_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = bools_t()
        self.one_bool = bool(struct.unpack('b', buf.read(1))[0])
        self.fixed_array = map(bool, struct.unpack('>3b', buf.read(3)))
        self.num_a, self.num_b = struct.unpack(">bb", buf.read(2))
        self.one_dim_array = map(bool, struct.unpack('>%db' % self.num_a, buf.read(self.num_a)))
        self.two_dim_array = []
        for i0 in range(self.num_a):
            self.two_dim_array.append(map(bool, struct.unpack('>%db' % self.num_b, buf.read(self.num_b))))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if bools_t in parents: return 0
        tmphash = (0x91cff66a81b52b83) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if bools_t._packed_fingerprint is None:
            bools_t._packed_fingerprint = struct.pack(">Q", bools_t._get_hash_recursive([]))
        return bools_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

