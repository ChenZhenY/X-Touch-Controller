/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtest;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class comments_t implements lcm.lcm.LCMEncodable
{
    public byte field_a;
    public short field_b;
    public int field_c;
    public long field_d;
    public float field_e;
    public int array[];
 
    public comments_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x4c8ffa86357c7d7eL;
 
    public static final byte const_field = (byte) 5;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtest.comments_t.class))
            return 0L;
 
        classes.add(lcmtest.comments_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.field_a); 
 
        outs.writeShort(this.field_b); 
 
        outs.writeInt(this.field_c); 
 
        outs.writeLong(this.field_d); 
 
        outs.writeFloat(this.field_e); 
 
        for (int a = 0; a < this.field_a; a++) {
            outs.writeInt(this.array[a]); 
        }
 
    }
 
    public comments_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public comments_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtest.comments_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtest.comments_t o = new lcmtest.comments_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.field_a = ins.readByte();
 
        this.field_b = ins.readShort();
 
        this.field_c = ins.readInt();
 
        this.field_d = ins.readLong();
 
        this.field_e = ins.readFloat();
 
        this.array = new int[(int) field_a];
        for (int a = 0; a < this.field_a; a++) {
            this.array[a] = ins.readInt();
        }
 
    }
 
    public lcmtest.comments_t copy()
    {
        lcmtest.comments_t outobj = new lcmtest.comments_t();
        outobj.field_a = this.field_a;
 
        outobj.field_b = this.field_b;
 
        outobj.field_c = this.field_c;
 
        outobj.field_d = this.field_d;
 
        outobj.field_e = this.field_e;
 
        outobj.array = new int[(int) field_a];
        if (this.field_a > 0)
            System.arraycopy(this.array, 0, outobj.array, 0, this.field_a); 
        return outobj;
    }
 
}

